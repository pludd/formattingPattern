#+title: Packaging material
#+author: Nathan Stonewall
#+email: nathan.stonewall@gs1.se
#+date: <2023-10-13 Fri>
#+OPTIONS: H:1 num:nil toc:nil \n author:Nathan Stonewall date:2023-09-15 d:(not "HORSE")
# #+TOC: headlines 1
#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; margin: auto;} .custom-list { margin-bottom: 50px; }</style>
#+SEQ_TODO: NEXT(n) TODO(t) WAITING(w) SOMEDAY(s) PROJ(p) | DONE(d) CANCELLED(c)

{{{NEWLINE}}}

* *Option A*

/Note: Options are rendered as XML, but UI representation should be similar./

1 ~PackagingMaterial~ parent class, 1 child ~PackagingRawMaterialInformation~ class
*** Example
#+BEGIN_SRC xml
    <packagingMaterialTypeCode>POLYMER_PP</>
    <packagingMaterialCompositionQuantity>10</>
    <packagingMaterialColourCodeReference>BLK</>
    <packagingLabellingTypeCode>Label on package</>
    <packagingLabellingCoveragePercentage>60</>
    <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Crude oil</>
      <packagingRawMaterialPercentage>40</>
      <packagingRawMaterialCode>Recycled</>
      <packagingRawMaterialPercentage>60</>
    </PackagingRawMaterialInformation>
#+END_SRC
*** Effects
***** Possible to send one ~packagingMaterialTypeCode~ with >1 ~packagingRawMaterialCode~ .
***** Not possible to send above with >1 color.
***** 1 ~packagingMaterialTypeCode~ instance = 1 ~packagingMaterialColourCodeReference~ instance.

{{{NEWLINE}}}


* *Option B*
2 ~PackagingMaterial~ parent classes, each with respective ~PackagingRawMaterialInformation~ child class
*** Example
#+BEGIN_SRC xml
    <packagingMaterialTypeCode>POLYMER_PP</>
    <packagingMaterialCompositionQuantity>10</>
    <packagingMaterialcolourCodeReference>BLK</>
    <packagingLabellingTypeCode>Label on package</>
    <packagingLabellingCoveragePercentage>60</>
    <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Crude oil</>
      <packagingRawMaterialPercentage>40</>
    </PackagingRawMaterialInformation>

    <packagingMaterialTypeCode>POLYMER_PP</>
    <packagingMaterialCompositionQuantity>10</>
    <packagingMaterialcolourCodeReference>CLEAR</>
    <packagingLabellingTypeCode>Label on package</>
    <packagingLabellingCoveragePercentage>60</>
    <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Recycled</>
      <packagingRawMaterialPercentage>60</>
    </PackagingRawMaterialInformation>
#+END_SRC

*** Effects
***** Single material is misrepresented as two separate materials.
***** Real weight is misrepresented as two weights
****** And must be, since ~packagingMaterialCompositionQuantity~ is mandatory.
***** Redundant repetition of e.g. weight, labelling information.
****** This could tell a system that they refer to one and the same packaging element.


{{{NEWLINE}}}

* *Option C*
1 ~PackagingMaterial~ parent class, 2 child ~CompositeMaterialDetail~ classes, each with respective child ~PackagingRawMaterialInformation~ class
*** Example

#+BEGIN_SRC xml
  <packagingMaterialTypeCode>COMPOSITE</>
  <packagingMaterialCompositionQuantity>10</>
  <packagingLabellingTypeCode>Label on packaging</>
  <packagingLabellingCoveragePercentage>60</>

  <CompositeMaterialDetail>
    <packagingMaterialTypeCode>POLYMER_PP</>
    <!-- <packagingMaterialCompositionQuantity>10</> -->
    <packagingMaterialColorCodeReference>BLK</>
      <PackagingRawMaterialInformation>
        <packagingRawMaterialCode>Crude oil</>
        <packagingRawMaterialPercentage>40</>
      </PackagingRawMaterialInformation>
  </CompositeMaterialDetail>
  <CompositeMaterialDetail>
    <packagingMaterialTypeCode>POLYMER_PP</>
    <!-- <packagingMaterialCompositionQuantity>10</> -->
    <packagingMaterialColorCodeReference>CLEAR</>
      <PackagingRawMaterialInformation>
        <packagingRawMaterialCode>Recycled</>
        <packagingRawMaterialPercentage>60</>
      </PackagingRawMaterialInformation>
  </CompositeMaterialDetail>
#+END_SRC

*** Effects
***** The most expressive solution, but ...
***** Same ~packagingMaterialTypeCode~ must be populated for each composite material
****** This could tell a system that they refer to one and the same packaging element.
***** ~packagingMaterialCompositionQuantity~ (weight) need not be filled in for each composite material since VR 1025 does not apply.
***** ~CompositeMaterialDetail~ class will need to be brought into Swedish TII.

{{{NEWLINE}}}

* General comments
*** As long as ICA and supplier understand one another, no one necessarily needs to do anything.
*** But difficult to make recommendations without knowing final overall requirements.

* Tips for UI and system architecture
*** Build your UI as close to XML schema as possible.
*** Do not abstract away details merely because they do not seem needed today.
*** If schema does not allow you to express what you want to express, either:
a. It can be modified
    - Requires broad agreement in all of GDSN
b. *_It can be worked around in your own system(s)_* by:
    - Having involved parties agree on how to do things
    - Based on these agreements, applying the appropriate logic in your systems.


{{{NEWLINE}}}
