#+title: Packaging material
#+author: Nathan Stonewall
#+email: nathan.stonewall@gs1.se
#+date: <2023-10-13 Fri>
#+OPTIONS: H:1 num:nil toc:nil \n author:Nathan Stonewall date:2023-09-15 d:(not "HORSE")
# #+TOC: headlines 1
#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; margin: auto;} .custom-list { margin-bottom: 50px; }</style>

{{{NEWLINE}}}

* Option A: 1 PackagingMaterial parent class, 2 child PackagingRawMaterialInformation classes
*** Example
#+BEGIN_SRC xml
    <packagingMaterialTypeCode>POLYMER_PP</packagingMaterialTypeCode>
    <packagingMaterialCompositionQuantity>10</>
    <packagingMaterialColourCodeReference>BLK</>
    <packagingLabellingTypeCode>Label on package</>
    <packagingLabellingCoveragePercentage>60</>
    <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Crude oil</>
      <packagingRawMaterialPercentage>40</>
      <packagingRawMaterialCode>Recycled</>
      <packagingRawMaterialPercentage>60</>
    </PackagingRawMaterialInformation>
#+END_SRC
*** Effects:
***** Possible to send one ~packagingMaterialTypeCode~ with >1 ~packagingRawMaterialCode~ .
***** Not possible to send above with two different colors.
***** In other words: not possible to provide ~packagingMaterialColourCodeReference~ per ~packagingRawMaterialCode~.
***** One ~packagingMaterialTypeCode~ instance = one ~packagingMaterialColourCodeReference~ instance.

{{{NEWLINE}}}


* Option B: 2 PackagingMaterial parent classes, each with respective PackagingRawMaterialInformation child class
*** Example
#+BEGIN_SRC xml
    <packagingMaterialTypeCode>POLYMER_PP</packagingMaterialTypeCode>
    <packagingMaterialCompositionQuantity>10</>
    <packagingMaterialcolourCodeReference>BLK</>
    <packagingLabellingTypeCode>Label on package</>
    <packagingLabellingCoveragePercentage>60</>
    <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Crude oil</>
      <packagingRawMaterialPercentage>40</>
    </PackagingRawMaterialInformation>
    <packagingMaterialTypeCode>POLYMER_PP</packagingMaterialTypeCode>
    <packagingMaterialCompositionQuantity>10</>
    <packagingMaterialcolourCodeReference>CLEAR</>
    <packagingLabellingTypeCode>Label on package</>
    <packagingLabellingCoveragePercentage>60</>
    <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Recycled</>
      <packagingRawMaterialPercentage>60</>
    </PackagingRawMaterialInformation>
#+END_SRC

*** Effects:
***** Single material is misrepresented as two separate materials.
***** Real weight is misrepresented as two weights (and must be, since ~packagingMaterialCompositionQuantity~ is mandatory).
***** Redundant repetition of e.g. weight, labelling information.
****** This could alert a system to the fact that they refer to the same material.


{{{NEWLINE}}}

* Option C: 1 PackagingMaterial parent class, 2 child CompositeMaterialDetail classes, 2 child PackagingRawMaterialInformation classes
*** Example

#+BEGIN_SRC xml
  <packagingMaterialTypeCode>COMPOSITE</>
  <packagingMaterialCompositionQuantity>10</>
  <packagingLabellingTypeCode>Label on packaging</>
  <packagingLabellingCoveragePercentage>60</>
  <CompositeMaterialDetail>
    <packagingMaterialTypeCode>POLYMER_PP</>
    <!-- <packagingMaterialCompositionQuantity>10</> -->
    <packagingMaterialColorCodeReference>BLK</>
      <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Crude oil</>
      <packagingRawMaterialPercentage>40</>
      </PackagingRawMaterialInformation>
  </CompositeMaterialDetail>
  <CompositeMaterialDetail>
    <packagingMaterialTypeCode>POLYMER_PP</>
    <!-- <packagingMaterialCompositionQuantity>10</> -->
    <packagingMaterialColorCodeReference>CLEAR</>
      <PackagingRawMaterialInformation>
      <packagingRawMaterialCode>Recycled</>
      <packagingRawMaterialPercentage>60</>
      </PackagingRawMaterialInformation>
  </CompositeMaterialDetail>
#+END_SRC

*** Effect:
***** The most expressive solution, but ...
***** ~CompositeMaterialDetail~ class will need to be brought into Swedish TII.
***** Same ~material~ must be populated for each composite material
****** ... allowing a system to e.g. detect that it is one and the same material.
***** Weight need not be filled in for each composite material since VR 1025 does not apply.
***** If ~Packaging~ module is expected to be further developed, it may make sense to start making fuller use of it.



* General comments
*** To the extent possible, build your TII registration UIs as close to XML schema as possible.
*** If schema does not currently allow you to express what you want to express, either:
a. It can be modified (requires broad agreement in all of GDSN)
b. Or it can be worked around in your own system(s) by:
    - Agreeing with your users on how you want to do things
    - And applying the appropriate logic in your systems.

*** In principle: As long as Ica and suppler understand one another, no one necessarily needs to do anything.

*** But difficult to make recommendations without knowing final overall requirements.
